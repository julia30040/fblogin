{"version":3,"sources":["container/Home/HomePage.jsx","container/MainBoard.jsx","App.js","serviceWorker.js","index.js"],"names":["styles","wrapper","backgroundColor","height","minHeight","display","flexDirection","alignItems","justifyContent","title","color","fbLoginBtn","fontSize",":hover","HomePage","res","_this$props","this","props","history","storeLoginMemberData","email","alert","console","log","push","_this","react_default","a","createElement","style","facebook_login_with_button_default","appId","autoLoad","fields","callback","loginWithFacebook","PureComponent","radium","MainBoard","react","Switch","Route","path","component","Component","fullHeight","overflow","App","style_root","BrowserRouter","container_MainBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAQMA,EAAS,CACbC,QAAS,CACPC,gBAAiB,UACjBC,OAAQ,OACRC,UAAW,QACXC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,UAElBC,MAAO,CACLC,MAAO,WAETC,WAAY,CACVD,MAAO,UACPE,SAAU,GACVC,SAAU,CACRH,MAAO,sBAETL,QAAS,SAIPS,4LACcC,GAAK,IAAAC,EAIjBC,KAAKC,MAFPC,EAFmBH,EAEnBG,QAFmBH,EAGnBI,qBAGEL,EAAIM,QACNC,MAAM,4BAENC,QAAQC,IAAIT,GASZI,EAAQM,KAAK,gDAIR,IAAAC,EAAAT,KACP,OACEU,EAAAC,EAAAC,cAAA,OAAKC,MAAO9B,EAAOC,SACjB0B,EAAAC,EAAAC,cAAA,MAAIC,MAAO9B,EAAOS,OAAlB,wCACAkB,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,MAAM,kBACNC,UAAU,EACVC,OAAO,qBACPC,SAAU,SAACpB,GAAD,OAASW,EAAKU,kBAAkBrB,cA/B7BsB,iBAqCRC,cAAOxB,GCnDPyB,mLAVX,OACEZ,EAAAC,EAAAC,cAACW,EAAA,SAAD,KACEb,EAAAC,EAAAC,cAACY,EAAA,EAAD,KACEd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAW9B,aALb+B,aCKxB,IAAM7C,EAAS,CACb8C,WAAY,CACV3C,OAAQ,QAEVF,QAAS,CACP8C,SAAU,WAIRC,mLAEF,OACErB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAWnB,MAAO9B,EAAO8C,YACvBnB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CACR9B,EAAOC,QACPD,EAAO8C,aAETnB,EAAAC,EAAAC,cAACsB,EAAD,gBATMN,aAiBHP,cAAOU,GCxBFI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.50037610.chunk.js","sourcesContent":["// @flow\nimport React, { PureComponent } from 'react';\nimport radium from 'radium';\nimport FacebookLogin from 'react-facebook-login';\n// import { bindActionCreators } from 'redux';\n// import { connect } from 'react-redux';\n// import * as MemberActions from '../../actions/member.js';\n\nconst styles = {\n  wrapper: {\n    backgroundColor: '#8f755e',\n    height: '100%',\n    minHeight: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    color: '#ffca31',\n  },\n  fbLoginBtn: {\n    color: '#ffffff',\n    fontSize: 15,\n    ':hover': {\n      color: 'rgb(222, 214, 103)',\n    },\n    display: 'none',\n  },\n};\n\nclass HomePage extends PureComponent {\n  loginWithFacebook(res) {\n    const {\n      history,\n      storeLoginMemberData,\n    } = this.props;\n\n    if (res.email) {\n      alert('成功登入');\n\n      console.log(res);\n\n      // storeLoginMemberData({\n      //   id: res.id,\n      //   name: res.name,\n      //   email: res.email,\n      //   accessToken: res.accessToken,\n      // });\n\n      history.push('candidates');\n    }\n  }\n\n  render() {\n    return (\n      <div style={styles.wrapper}>\n        <h1 style={styles.title}>登入投票指南</h1>\n        <FacebookLogin\n          appId=\"126909908010825\"\n          autoLoad={true}\n          fields=\"name,email,picture\"\n          callback={(res) => this.loginWithFacebook(res)} />\n      </div>\n    );\n  }\n}\n\nexport default radium(HomePage);\n","// @flow\nimport React, { Component, Fragment } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport HomePage from './Home/HomePage.jsx';\n\nclass MainBoard extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Switch>\n          <Route path=\"/\" component={HomePage} />\n        </Switch>\n      </Fragment>\n    );\n  }\n}\n\nexport default MainBoard;\n","import React, { Component } from 'react';\nimport debug from 'debug';\nimport radium, { StyleRoot } from 'radium';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport MainBoard from './container/MainBoard.jsx';\n\nif (process.env.NODE_ENV !== 'production') {\n  debug.enable('Portfolio:*');\n}\n\nconst styles = {\n  fullHeight: {\n    height: '100%',\n  },\n  wrapper: {\n    overflow: 'hidden',\n  },\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <StyleRoot style={styles.fullHeight}>\n        <Router>\n          <div style={[\n              styles.wrapper,\n              styles.fullHeight,\n            ]}>\n            <MainBoard />\n          </div>\n        </Router>\n      </StyleRoot>\n    );\n  }\n}\n\nexport default radium(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}